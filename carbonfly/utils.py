from __future__ import annotations
"""
carbonfly
    a lightweight, easy-to-use Python API and 
    toolbox for indoor CO2 CFD simulations in Grasshopper
    based on OpenFOAM and WSL

- Author: Qirui Huang
- License: AGPL-3.0
- Website: https://github.com/RWTH-E3D/carbonfly
"""

# carbonfly/utils.py
"""
Utility functions for generating OpenFOAM-compatible file structures.
"""

def foam_header(
    object_name: str,
    of_class: str = "dictionary",
    location: str = None,
    *,
    of_version: str = "10",
    project_name: str = "carbonfly",
    author: str = "Qirui Huang",
    project_url: str = "https://github.com/RWTH-E3D/carbonfly"
) -> str:
    """
    Return an OpenFOAM-style header with Carbonfly attribution.

    Args:
        object_name:    OpenFOAM object name (e.g., 'snappyHexMeshDict', 'U').
        of_class:       OpenFOAM class (e.g., 'dictionary', 'volScalarField', 'volVectorField').
        of_version:     OpenFOAM version label to show in the banner.
        project_name:   Project name for attribution line.
        author:         Author handle for attribution line.
        project_url:    URL for the project.

    Usage:
        lines = [foam_header("snappyHexMeshDict")]
    """
    banner = (
        "/*--------------------------------*- C++ -*----------------------------------*\\\n"
        "  =========                 |\n"
        "  \\\\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox\n"
        "   \\\\    /   O peration     | Website:  https://openfoam.org\n"
       f"    \\\\  /    A nd           | Version:  {of_version}\n"
        "     \\\\/     M anipulation  |\n\n"
    )
    attribution = (
        f"Generated by {project_name}\n"
        f"  - Author: {author}\n"
        f"  - Website: {project_url}\n"
        "\\*---------------------------------------------------------------------------*/\n\n"
        "FoamFile\n"
        "{\n"
         "    format      ascii;\n"
        f"    class       {of_class};\n"
    )
    if location:
        attribution += f"    location    \"{location}\";\n"

    attribution += (
        f"    object      {object_name};\n"
        "}\n\n"
        "// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //\n"
    )

    return banner + attribution


def unit_scale_to_m(unit: str) -> float:
    u = (unit or "mm").strip().lower()
    if u == "mm": return 1e-3
    if u == "cm": return 1e-2
    if u == "m":  return 1.0
    raise ValueError("unit must be 'mm'|'cm'|'m'")